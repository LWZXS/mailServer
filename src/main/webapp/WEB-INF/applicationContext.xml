<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:component-scan base-package="com.mail.delegate" />
	<context:component-scan base-package="com.mail.rest" />
	<context:component-scan base-package="com.mail.common" />
	<import resource="dataSource.xml" />
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="writeDataSource" />
	</bean>
	<tx:annotation-driven />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="writeDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath*:mappers/*Dao.xml"></property>
	</bean>	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.mail.dao" />
	</bean>
<!-- 	<bean id="dataSource" class="com.shubilee.common.ChooseDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				write
				<entry key="write" value-ref="writeDataSource" />
				read
				<entry key="read" value-ref="readDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="writeDataSource" />
	</bean> -->
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="transaction*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="true" />

<!-- 	<bean id="dataSourceAspect" class="com.shubilee.common.DataSourceAspect" /> -->
<!-- 	<bean id="testAspect" class="com.shubilee.common.TestAspect" />
	<bean id="tokenAspect" class="com.shubilee.common.TokenAspect" />
	<aop:config>
		<aop:advisor order="3" pointcut-ref="delegate" advice-ref="userTxAdvice" />
						
		<aop:aspect id="c" order="2" >
			<aop:pointcut id="delegate"
				expression="execution(* com.shubilee.delegate.TransactionDelegate.*(..))" />
			<aop:before pointcut-ref="delegate" method="before" />
			<aop:after pointcut-ref="delegate" method="after" />
		</aop:aspect>
		<aop:aspect id="a" order="0" ref="testAspect">
			<aop:pointcut id="test"
				expression="execution(* com.shubilee.rest.*.*(..))" />
			<aop:before pointcut-ref="test" method="before" />
			<aop:after pointcut-ref="test" method="after" />
			<aop:after-returning returning="returnVal" pointcut-ref="test" method="log" />
		</aop:aspect>		
		<aop:aspect id="d" order="1" ref="tokenAspect">
			<aop:pointcut id="rest"
				expression="(execution(* com.shubilee.rest.*.*(..))) 
				and !execution(* com.shubilee.rest.RestSecurityService.*(..))
				and !execution(* com.shubilee.rest.RestBackEndService.*(..))
				and !execution(* com.shubilee.rest.RestAdminService.*(..))
				and !execution(* com.shubilee.rest.RestTestService.*(..))
				and !execution(* com.shubilee.rest.RestUserService.resetPassword(..))" />
			<aop:before pointcut-ref="rest" method="checkToken" />
		</aop:aspect>
	</aop:config> -->
<bean id="emailTemplateResolver" class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
	<property name="prefix" value="/templates/"></property>
	<property name="suffix" value=".html"></property>
	<property name="templateMode" value="HTML5"></property>
	<property name="order" value="1"></property>
	<property name="characterEncoding" value="UTF-8"></property>
	<property name="cacheable" value="true"></property>
</bean>
<bean id="DbTemplateResolver" class="com.mail.common.ThymeleafTemplateResolver">
	<property name="templateMode" value="HTML5"></property>
	<property name="order" value="1"></property>
	<property name="characterEncoding" value="UTF-8"></property>
	<property name="cacheable" value="false"></property>
</bean>
<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
	<property name="templateResolvers">
		<set>
			<ref bean="DbTemplateResolver" />
			<ref bean="emailTemplateResolver" />
		</set>
	</property>
  </bean>
 <bean id="connectionFactory"
  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	<property name="usePool" value="true"></property>
        <property name="hostName" value="172.31.30.248" />
        <property name="port" value="6379" />
        <property name="password" value="" />
        <property name="timeout" value="100000" />
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>  
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="300" />
        <property name="maxIdle" value="100" />
        <property name="maxWaitMillis" value="1000" />
        <!--
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        -->
    </bean>
 <!-- redis template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>
    <bean id="applicationContextProvder" class="com.mail.delegate.ApplicationContextProvider"/>

 


 
</beans>
